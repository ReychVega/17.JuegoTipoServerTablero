package GUI;

import Client.Client;
import Domain.User;
import java.io.IOException;

/*
 * La clase RegistrationJFrame representa una interfaz gráfica para el registro de usuarios.
 * Esta clase extiende javax.swing.JFrame para crear la ventana de registro.
 * Contiene atributos como el usuario (User) y una instancia de Client (clientSocket) para manejar la comunicación con el servidor.
 * @author reych
 */
public class RegistrationJFrame extends javax.swing.JFrame {
    private User user;
    private Client clientSocket;

    /**
     * Creates new form RegistrationJFrame
     */
    public RegistrationJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane2 = new javax.swing.JDesktopPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        alert = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPasswordField1 = new javax.swing.JPasswordField();
        jPasswordField2 = new javax.swing.JPasswordField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        button1 = new java.awt.Button();
        button2 = new java.awt.Button();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Registration");
        setBackground(new java.awt.Color(0, 0, 0));
        setMaximumSize(new java.awt.Dimension(700, 900));
        setResizable(false);

        jDesktopPane2.setBackground(new java.awt.Color(0, 0, 0));
        jDesktopPane2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Castellar", 0, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("User:");
        jDesktopPane2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 120, -1, -1));

        jLabel3.setFont(new java.awt.Font("Castellar", 0, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Password");
        jDesktopPane2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 170, -1, -1));

        alert.setFont(new java.awt.Font("Cascadia Code", 0, 16)); // NOI18N
        alert.setForeground(new java.awt.Color(255, 0, 0));
        jDesktopPane2.add(alert, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 300, 210, 20));

        jTextField1.setToolTipText("");
        jDesktopPane2.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 120, 120, -1));
        jDesktopPane2.add(jPasswordField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 200, 120, -1));
        jDesktopPane2.add(jPasswordField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 160, 120, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/initBackground.jpg"))); // NOI18N
        jLabel5.setText(" ;");
        jDesktopPane2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 430, 700, 470));

        jLabel6.setFont(new java.awt.Font("Castellar", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 153, 153));
        jLabel6.setText("Registration");
        jDesktopPane2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 60, 221, 40));

        button1.setBackground(new java.awt.Color(0, 102, 102));
        button1.setFont(new java.awt.Font("Cascadia Mono", 0, 12)); // NOI18N
        button1.setForeground(new java.awt.Color(255, 255, 255));
        button1.setLabel("Register");
        button1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                registerMouseClicked(evt);
            }
        });
        jDesktopPane2.add(button1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 250, 120, 30));

        button2.setActionCommand("back");
        button2.setBackground(new java.awt.Color(51, 0, 51));
        button2.setFont(new java.awt.Font("Cascadia Mono", 0, 12)); // NOI18N
        button2.setForeground(new java.awt.Color(255, 255, 255));
        button2.setLabel("Back");
        button2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
        });
        jDesktopPane2.add(button2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 10, 100, 30));

        jLabel7.setFont(new java.awt.Font("Castellar", 0, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Confirm Password");
        jDesktopPane2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 210, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /*
     * Evento que se dispara cuando se hace clic en el botón de registro.
     * Recolecta los datos ingresados por el usuario, crea una instancia de User y la envía al servidor a través del cliente.
     * Luego, muestra el mensaje de respuesta del servidor en la interfaz gráfica.
     */
    private void registerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_registerMouseClicked
  
// Caso 1. Que todos los campos estén llenos
        if (!jTextField1.getText().isEmpty() && !jPasswordField1.getText().isEmpty()
                && !jPasswordField2.getText().isEmpty()) {

            //1.2 Revisamos que las contraseñas coincidan
            if (jPasswordField1.getText().equals(jPasswordField2.getText())) {

                // Creamos una nueva instancia de User con los datos del formulario
                user = new User(jTextField1.getText(), jPasswordField1.getText());

                if (clientSocket == null) {
                    connectToServer();
                }

                // Enviamos el objeto User al servidor a través del socket
                clientSocket.sendUserToServer(user);

                // Obtenemos la respuesta del servidor y la mostramos en la interfaz gráfica
                String message = clientSocket.receiveMessageFromServer();
                this.alert.setText(message);

            } else {// Indicamos que las contraseñas no coinciden
                alert.setText("Passwords do not match");
            }
        } else {  //Caso 2. Indicamos que hay datos incompletos
            alert.setText("Incomplete data");
        }

    }//GEN-LAST:event_registerMouseClicked

    /*
     * Evento que se dispara cuando se hace clic en el botón "Back" (Volver).
     * Cierra la conexión con el servidor y muestra la ventana principal (MainJFrame).
     */
    private void backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseClicked
        if (clientSocket!=null) {
        clientSocket.closeConnection();            
        }
        /* Create and display the main form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainJFrame().setVisible(true);

            }
        });
        dispose();
    }//GEN-LAST:event_backMouseClicked
    
    
     /*
     * Método para conectarse al servidor.
     * Crea una instancia de Client para establecer la conexión con el servidor.
     * Si ocurre algún error, se mostrará un mensaje en la interfaz gráfica.
     */
    private void connectToServer() {
        try {
            clientSocket = new Client("localhost", 5025);
        } catch (IOException ex) {
            alert.setText("Internal error");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel alert;
    private java.awt.Button button1;
    private java.awt.Button button2;
    private javax.swing.JDesktopPane jDesktopPane2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JPasswordField jPasswordField2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
