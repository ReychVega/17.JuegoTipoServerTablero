package GUI;

import Client.Client;
import Domain.Damas;
import Domain.ServerRequest;
import static GUI.MainJFrame.clientSocket;
import java.awt.Color;
import java.awt.GridLayout;
import java.beans.PropertyVetoException;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author reych
 */
public class GameJInternalFrame extends JInternalFrame implements Runnable{
    private final InicioJInternalFrame mainInternalFrame; 
    private ServerRequest newRequest;
    private String user;
    //atributos necesarios para el hilo
    private boolean start;
    private long espera;
    private Thread thread;
   
    private JPanel p;
    private JButton[] b;
    private Damas juego;
    private juegoListener pL;
    private int lastSelectedButton = -1;
    
    /**
     * Creates new form GameJInternalFrame
     */
    public GameJInternalFrame(InicioJInternalFrame mainInternalFrame, String user) {
        initComponents();
        this.user=user;
        this.start = true;
        this.mainInternalFrame = mainInternalFrame; // Inicializa la referencia a MainJFrame
        
        p = new JPanel();
        juego = new Damas();
        pL = new juegoListener(this);

        this.setLayout(null);

        p.setBackground(Color.white);
        p.setLayout(null);
        p.setBounds(40, 50, 600, 600);
        
        iniciamosTablero();
        
        this.add(p);
        
    }

      public JButton getButton(int index) {
        return b[index];
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblEnemyName = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Game");
        setMaximumSize(new java.awt.Dimension(700, 900));
        setPreferredSize(new java.awt.Dimension(700, 900));

        lblEnemyName.setBackground(new java.awt.Color(0, 51, 51));
        lblEnemyName.setFont(new java.awt.Font("Segoe Print", 0, 16)); // NOI18N
        lblEnemyName.setForeground(new java.awt.Color(0, 51, 51));
        lblEnemyName.setText("Oponente");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(543, Short.MAX_VALUE)
                .addComponent(lblEnemyName, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblEnemyName)
                .addContainerGap(835, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     @Override
    public void run() {
        long started;
        long elapse;
        this.espera = 5000; // 5 segundos en milisegundos

        while (this.start) {
            repaint();
            started = System.nanoTime();

            elapse = System.nanoTime() - started;
            // ...   
            getCompleteData();

            //...
            if (this.espera < 0) {
                this.espera = 10000;
                /// System.out.println("Tiempo de espera ajustado: " + this.espera + " ms");
            } else {
                try {
                    Thread.sleep(espera);
                } catch (InterruptedException ex) {
                    System.out.println("Error en hilo en lacle internalFrame");
                }
            }

        }//while
    }//run

    @Override
    public void addNotify() {
        super.addNotify();
        if (this.thread == null) {
            this.thread = new Thread(this);
            this.thread.start();
        }
    }//addNotify
    
    //solicitud de datos de juego
    private void getCompleteData(){ 
        
        try {
            verifyGameState();
        } catch (PropertyVetoException ex) {
           // Logger.getLogger(GameJInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    //vrifica salida del juego
    private void verifyGameState() throws PropertyVetoException {
        try {
            //validamos inicio de juego
            newRequest = new ServerRequest(user, "getGameValidation");
            if (clientSocket == null) {
                connectToServer();
            }
            //Enviamos el obj. request al servidor a través del socket
            clientSocket.sendRequestToServer(newRequest);
            Object receivedObject = clientSocket.getEntrada().readObject();
            newRequest = (ServerRequest) receivedObject;
            
            if (newRequest.getEnemy() == null && newRequest.isGameState() == false) {
                mainInternalFrame.getMenuBar().setVisible(true);
                //paramos el hilo
                this.start = false;
                
                // Remove game from the JDesktopPane.
                this.mainInternalFrame.getjDesktopPane2().remove(mainInternalFrame.getGame());
                
                // Dispose of the game's internal resources.
                this.setClosed(true);
                this.dispose();
                
                // Hide the game component after removing and disposing of it.
                this.setVisible(false);
                
                // Set the game reference to null.
                mainInternalFrame.setGame(null);

                //iniamos el hilo en el internal frame padre
                mainInternalFrame.setStart(true);
                mainInternalFrame.setThread(new Thread(mainInternalFrame));
                mainInternalFrame.getThread().start();

                JOptionPane.showMessageDialog(this, "Game finished", "Process Status", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (IOException | ClassNotFoundException ex) {
           // Logger.getLogger(GameJInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

     // Método para conectarse al servidor.
    private void connectToServer() {
        try {
            clientSocket = new Client("localhost", 5025);
        } catch (IOException ex) {
            System.out.println("*");
        }
    }

      // Método para actualizar las imágenes de los botones según el estado del juego
    public void actualizarTablero() {
        for (int i = 0; i < b.length; i++) {
            String ruta = getPath(juego.getJuego()[i / 8][i % 8]);
            b[i].setIcon(new ImageIcon(getClass().getResource(ruta)));
        }
    }


    private void iniciamosTablero() {
    p.removeAll();
    p.setLayout(new GridLayout(8, 8));

    b = new JButton[64];
    for (int i = 0; i < b.length; i++) {
        String ruta = getPath(juego.getJuego()[i / 8][i % 8]);
        b[i] = new JButton();
        b[i].setBackground(Color.black);
        b[i].setActionCommand("" + i);
        b[i].setIcon(new ImageIcon(getClass().getResource(ruta)));

        if (juego.getJuego()[i / 8][i % 8] == 0) {
            b[i].setEnabled(false);
        }

        b[i].addActionListener(pL);
        p.add(b[i]);
    }

    p.revalidate();
    p.repaint();
}
    
      private String getPath(int num) {
        String s = "";
        switch (num) {
            case 0:
                s = "/images/tablero/fichaNula.jpg";
                break;
            case 1:
                s = "/images/tablero/blueCircle.png";
                break;
            case 2:
                s = "/images/tablero/fichaEnemiga.png";
                break;
            case 3:
                s = "/images/tablero/fichaValida.jpg";
                break;
            case 11:
                s = "/images/tablero/rey.png";
                break;
            case 22:
                s = "/images/reyEnemigo.png";
                break;
        }
        return s;
    }

    
    public boolean realizarMovimiento(int fromIndex, int toIndex) {
        int rowFrom = fromIndex / 8;
        int colFrom = fromIndex % 8;
        int rowTo = toIndex / 8;
        int colTo = toIndex % 8;

        boolean isValidMove = juego.validaMovimiento(rowFrom, colFrom, rowTo, colTo);
        if (isValidMove) {
            juego.movimiento(rowFrom, colFrom, rowTo, colTo);
            //System.out.println(juego.toString());
            actualizarTablero();
        }
        return isValidMove;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblEnemyName;
    // End of variables declaration//GEN-END:variables
}
