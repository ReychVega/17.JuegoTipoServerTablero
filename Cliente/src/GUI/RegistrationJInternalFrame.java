package GUI;

import Client.Client;
import Domain.User;
import static GUI.MainJFrame.clientSocket;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/*
 * La clase RegistrationJInternalFrame representa una interfaz gráfica para el registro de usuarios.
 * Esta clase extiende javax.swing.JInternalFrame para crear la ventana de registro.
 * Contiene atributos como el usuario (User) y una instancia de Client (clientSocket) para manejar la comunicación con el servidor.
 * @author reych
 */
public class RegistrationJInternalFrame extends javax.swing.JInternalFrame {
 private User user;
        private final MainJFrame mainFrame; // Agrega este atributo

    /**
     * Creates new form RegistrationJInternalFrame
     * @param mainFrame
     */
    public RegistrationJInternalFrame(MainJFrame mainFrame) {
        initComponents();
        this.mainFrame = mainFrame; // Inicializa la referencia a MainJFrame
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane2 = new javax.swing.JDesktopPane();
        lblUser = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        txtConfirmPassword = new javax.swing.JPasswordField();
        lblTittle = new javax.swing.JLabel();
        btnRegister = new java.awt.Button();
        btnComeBack = new java.awt.Button();
        lblConfirmPassword = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(null);
        setTitle("Registration");
        setAlignmentX(0.0F);
        setAlignmentY(0.0F);
        setMaximumSize(new java.awt.Dimension(700, 380));
        setMinimumSize(new java.awt.Dimension(700, 380));
        setNormalBounds(new java.awt.Rectangle(0, 0, 690, 380));
        setPreferredSize(new java.awt.Dimension(700, 380));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jDesktopPane2.setBackground(new java.awt.Color(255, 255, 255));
        jDesktopPane2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblUser.setFont(new java.awt.Font("Castellar", 0, 16)); // NOI18N
        lblUser.setText("User:");
        jDesktopPane2.add(lblUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 120, -1, -1));

        lblPassword.setFont(new java.awt.Font("Castellar", 0, 16)); // NOI18N
        lblPassword.setText("Password");
        jDesktopPane2.add(lblPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 170, -1, -1));

        txtUser.setToolTipText("");
        jDesktopPane2.add(txtUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 120, 120, -1));
        jDesktopPane2.add(txtPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 200, 120, -1));
        jDesktopPane2.add(txtConfirmPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 160, 120, -1));

        lblTittle.setFont(new java.awt.Font("Castellar", 1, 18)); // NOI18N
        lblTittle.setForeground(new java.awt.Color(0, 153, 153));
        lblTittle.setText("Registration");
        jDesktopPane2.add(lblTittle, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 50, 221, 40));

        btnRegister.setBackground(new java.awt.Color(0, 102, 102));
        btnRegister.setFont(new java.awt.Font("Cascadia Mono", 0, 12)); // NOI18N
        btnRegister.setForeground(new java.awt.Color(255, 255, 255));
        btnRegister.setLabel("Register");
        btnRegister.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRegisterregisterMouseClicked(evt);
            }
        });
        jDesktopPane2.add(btnRegister, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 250, 120, 30));

        btnComeBack.setActionCommand("back");
        btnComeBack.setBackground(new java.awt.Color(51, 0, 51));
        btnComeBack.setFont(new java.awt.Font("Cascadia Mono", 0, 12)); // NOI18N
        btnComeBack.setForeground(new java.awt.Color(255, 255, 255));
        btnComeBack.setLabel("Back");
        btnComeBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnComeBackbackMouseClicked(evt);
            }
        });
        jDesktopPane2.add(btnComeBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 100, 30));

        lblConfirmPassword.setFont(new java.awt.Font("Castellar", 0, 16)); // NOI18N
        lblConfirmPassword.setText("Confirm Password");
        jDesktopPane2.add(lblConfirmPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 210, -1, -1));

        getContentPane().add(jDesktopPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 6, 680, 517));

        pack();
    }// </editor-fold>//GEN-END:initComponents

     /*
     * Evento que se dispara cuando se hace clic en el botón de registro.
     * Recolecta los datos ingresados por el usuario, crea una instancia de User y la envía al servidor a través del cliente.
     * Luego, muestra el mensaje de respuesta del servidor en la interfaz gráfica.
     */
    private void btnRegisterregisterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRegisterregisterMouseClicked
        this.btnRegister.setEnabled(false);
        this.btnComeBack.setEnabled(false);
        
        
        // Caso 1. Que todos los campos estén llenos
        if (!txtUser.getText().isEmpty() && !txtPassword.getText().isEmpty()
            && !txtConfirmPassword.getText().isEmpty()) {

            String patron = ".*[:].*";
            Pattern pattern = Pattern.compile(patron);
            Matcher matcher = pattern.matcher(txtUser.getText());
            boolean contieneCaracterEspecial = matcher.matches();
            //Caso1.1
            if(!contieneCaracterEspecial){
            
            //1.2 Revisamos que las contraseñas coincidan
            if (txtPassword.getText().equals(txtConfirmPassword.getText())) {

                // Creamos una nueva instancia de User con los datos del formulario
                user = new User(txtUser.getText(), txtPassword.getText());
                user.setAction("registration");
                
                if (clientSocket == null) {
                    connectToServer();
                }

                // Enviamos el objeto User al servidor a través del socket
                clientSocket.sendUserToServer(user);

                // Obtenemos la respuesta del servidor y la mostramos en la interfaz gráfica
                String message = clientSocket.receiveMessageFromServer();
                JOptionPane.showMessageDialog(this, message, "Status", JOptionPane.INFORMATION_MESSAGE);

            } else {// Indicamos que las contraseñas no coinciden
                JOptionPane.showMessageDialog(this, "Passwords do not match", "Status", JOptionPane.INFORMATION_MESSAGE);
            }
            
            }else{
                 JOptionPane.showMessageDialog(this, "Do not use special characters", "Status", JOptionPane.INFORMATION_MESSAGE);
            }
            
        } else {  //Caso 2. Indicamos que hay datos incompletos
            JOptionPane.showMessageDialog(this, "Incomplete data", "Status", JOptionPane.INFORMATION_MESSAGE);
        }
        
        this.btnRegister.setEnabled(true);
        this.btnComeBack.setEnabled(true);
        txtUser.setText("");
        txtPassword.setText("");
        txtConfirmPassword.setText("");
        
    }//GEN-LAST:event_btnRegisterregisterMouseClicked

    private void btnComeBackbackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnComeBackbackMouseClicked
        if (clientSocket!=null) {

        }
        if (this.mainFrame!=null) {
            mainFrame.enableComponents(); // Llama al método en MainJFrame para mostrar los componentes
        }
        dispose();
    }//GEN-LAST:event_btnComeBackbackMouseClicked

        
     /*
     * Método para conectarse al servidor.
     * Crea una instancia de Client para establecer la conexión con el servidor.
     * Si ocurre algún error, se mostrará un mensaje en la interfaz gráfica.
     */
    private void connectToServer() {
        try {
            clientSocket = new Client("localhost", 5025);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Check your internet connection", "Status", JOptionPane.INFORMATION_MESSAGE);
        }
    }    
    
 
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btnComeBack;
    private java.awt.Button btnRegister;
    private javax.swing.JDesktopPane jDesktopPane2;
    private javax.swing.JLabel lblConfirmPassword;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblTittle;
    private javax.swing.JLabel lblUser;
    private javax.swing.JPasswordField txtConfirmPassword;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables
}
